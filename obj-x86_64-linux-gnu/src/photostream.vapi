/* photostream.vapi generated by valac 0.26.1.9-22126, do not modify. */

namespace PhotoStream {
	namespace Utils {
		[CCode (cheader_filename = "photostream.h")]
		public class Comment {
			public GLib.DateTime creationTime;
			public string id;
			public string text;
			public PhotoStream.Utils.User user;
			public Comment ();
		}
		[CCode (cheader_filename = "photostream.h")]
		public class HistoryEntry {
			public string id;
			public string type;
			public HistoryEntry ();
		}
		[CCode (cheader_filename = "photostream.h")]
		public class Location {
			public string id;
			public double latitude;
			public double longitude;
			public string name;
			public Location ();
		}
		[CCode (cheader_filename = "photostream.h")]
		public class Media {
			public int64 height;
			public string previewUrl;
			public string url;
			public int64 width;
			public Media ();
		}
		[CCode (cheader_filename = "photostream.h")]
		public class MediaInfo {
			public GLib.List<PhotoStream.Utils.Comment> comments;
			public int64 commentsCount;
			public GLib.DateTime creationTime;
			public bool didILikeThis;
			public string filter;
			public string id;
			public GLib.List<PhotoStream.Utils.User> likes;
			public int64 likesCount;
			public string link;
			public PhotoStream.Utils.Location location;
			public PhotoStream.Utils.Media media;
			public PhotoStream.Utils.User postedUser;
			public GLib.List<PhotoStream.Utils.TaggedUser> taggedUsers;
			public GLib.List<string> tags;
			public string title;
			public int type;
			public MediaInfo ();
		}
		[CCode (cheader_filename = "photostream.h")]
		public class NewsActivity {
			public string activityType;
			public string comment;
			public string imagePicture;
			public string postId;
			public GLib.DateTime time;
			public string userProfilePicture;
			public string username;
			public NewsActivity ();
		}
		[CCode (cheader_filename = "photostream.h")]
		public class Relationship {
			public string incoming;
			public string outcoming;
			public Relationship ();
		}
		[CCode (cheader_filename = "photostream.h")]
		public class Settings {
			public string email;
			public string phoneNumber;
			public bool recommend;
			public string sex;
			public Settings ();
		}
		[CCode (cheader_filename = "photostream.h")]
		public class Tag {
			public int64 mediaCount;
			public string tag;
			public Tag ();
		}
		[CCode (cheader_filename = "photostream.h")]
		public class TaggedUser {
			public PhotoStream.Utils.User user;
			public double x;
			public double y;
			public TaggedUser ();
		}
		[CCode (cheader_filename = "photostream.h")]
		public class User {
			public string bio;
			public int64 followed;
			public int64 followers;
			public string fullName;
			public string id;
			public int64 mediaCount;
			public string profilePicture;
			public PhotoStream.Utils.Relationship relationship;
			public string username;
			public string website;
			public User ();
		}
	}
	namespace Widgets {
		[CCode (cheader_filename = "photostream.h")]
		public class CommentBox : Gtk.Box {
			public int AVATAR_SIZE;
			public Gtk.Image avatar;
			public Gtk.Alignment avatarAlignment;
			public Gtk.EventBox avatarBox;
			public PhotoStream.Utils.Comment comment;
			public Gtk.ToolButton removeCommentButton;
			public Gtk.Alignment textAlignment;
			public Gtk.Box textBox;
			public Gtk.EventBox textEventBox;
			public Gtk.Label textLabel;
			public CommentBox (PhotoStream.Utils.Comment comment, bool withAvatar);
		}
		[CCode (cheader_filename = "photostream.h")]
		public class CommentsList : Gtk.ListBox {
			public Gtk.Entry commentBox;
			public GLib.List<PhotoStream.Widgets.CommentBox> comments;
			public Gtk.Alignment commentsBoxAlignment;
			public int commentsPosted;
			public bool loadAvatars;
			public Gtk.LinkButton loadMoreButton;
			public Gtk.Box moreBox;
			public string postId;
			public CommentsList ();
			public void addMoreButton (int64 commentsCount);
			public void append (PhotoStream.Utils.Comment post);
			public void clear ();
			public void mentionUser (string username);
			public new void prepend (PhotoStream.Utils.Comment post);
			public void removeCommentReally (PhotoStream.Widgets.CommentBox box);
			public CommentsList.withAvatars ();
		}
		[CCode (cheader_filename = "photostream.h")]
		public class DateLabel : Gtk.EventBox {
			public Gtk.Label dateLabel;
			public GLib.DateTime time;
			public const int TIME_REFRESH_INTERVAL;
			public DateLabel (GLib.DateTime time);
		}
		[CCode (cheader_filename = "photostream.h")]
		public class HashTagBox : Gtk.EventBox {
			public Gtk.Box box;
			public Gtk.Alignment hashtagNameAlignment;
			public Gtk.Label hashtagNameLabel;
			public Gtk.Alignment mediaCountAlignment;
			public Gtk.Label mediaCountLabel;
			public PhotoStream.Utils.Tag tag;
			public HashTagBox (PhotoStream.Utils.Tag tag);
		}
		[CCode (cheader_filename = "photostream.h")]
		public class HashTagFeedBox : Gtk.Box {
			public PhotoStream.Widgets.PostList hashtagFeed;
			public Gtk.Alignment hashtagTitleAlignment;
			public Gtk.Label hashtagTitleLabel;
			public PhotoStream.Utils.Tag tag;
			public HashTagFeedBox ();
			public void loadFeed (GLib.List<PhotoStream.Utils.MediaInfo> posts);
			public void loadOlderFeed (GLib.List<PhotoStream.Utils.MediaInfo> posts);
			public void loadTag (PhotoStream.Utils.Tag tag);
		}
		[CCode (cheader_filename = "photostream.h")]
		public class HashTagList : Gtk.ListBox {
			public GLib.List<PhotoStream.Widgets.HashTagBox> boxes;
			public Gtk.Button moreButton;
			public string olderFeedLink;
			public HashTagList ();
			public void addMoreButton ();
			public void append (PhotoStream.Utils.Tag tag);
			public void clear ();
			public bool contains (PhotoStream.Utils.Tag tag);
			public void deleteMoreButton ();
			public new void prepend (PhotoStream.Utils.Tag tag);
		}
		[CCode (cheader_filename = "photostream.h")]
		public class LocationFeedBox : Gtk.Box {
			public PhotoStream.Utils.Location location;
			public PhotoStream.Widgets.PostList locationFeed;
			public bool locationHasCoords;
			public Gtk.Image locationImage;
			public Gtk.Alignment locationImageAlignment;
			public Gtk.Box locationInfoBox;
			public Gtk.Alignment locationTitleAlignment;
			public Gtk.Label locationTitleLabel;
			public Gtk.Alignment openInMapsAlignment;
			public Gtk.Button openInMapsButton;
			public const int LOCATION_SIZE;
			public LocationFeedBox ();
			public void loadFeed (GLib.List<PhotoStream.Utils.MediaInfo> posts);
			public void loadLocation (PhotoStream.Utils.Location location);
			public void loadOlderFeed (GLib.List<PhotoStream.Utils.MediaInfo> posts);
		}
		[CCode (cheader_filename = "photostream.h")]
		public class MediaWindow : Gtk.Window {
			public Gst.Element audioConvert;
			public Gst.Element audioSink;
			public Gst.Element decode;
			public Gtk.DrawingArea drawingArea;
			public Gtk.EventBox eventBox;
			public bool finishedPlaying;
			public Gtk.Image image;
			public Gst.Pipeline pipeline;
			public Gst.Element src;
			public bool video;
			public Gst.Element videoConvert;
			public bool videoPlaying;
			public Gst.Element videoSink;
			public Gtk.Box windowBox;
			public MediaWindow (string fileName, bool video);
			protected override void destroy ();
			public void loadVideo (string fileName);
			public void switchVideoPlayback ();
		}
		[CCode (cheader_filename = "photostream.h")]
		public class NewsBox : Gtk.EventBox {
			public int AVATAR_SIZE;
			public PhotoStream.Utils.NewsActivity activity;
			public Gtk.Alignment avatarAlignment;
			public Gtk.EventBox avatarBox;
			public Gtk.Image avatarImage;
			public Gtk.Box box;
			public Gtk.Alignment commentAlignment;
			public Gtk.Label commentLabel;
			public Gtk.Alignment dateAlignment;
			public PhotoStream.Widgets.DateLabel dateLabel;
			public Gtk.Image postImage;
			public Gtk.Alignment postImageAlignment;
			public Gtk.EventBox postImageBox;
			public Gtk.Box textBox;
			public NewsBox (PhotoStream.Utils.NewsActivity activity);
		}
		[CCode (cheader_filename = "photostream.h")]
		public class NewsList : Gtk.Box {
			public GLib.List<PhotoStream.Widgets.NewsBox> boxes;
			public Gtk.ListBox newsList;
			public Gtk.ScrolledWindow newsWindow;
			public NewsList ();
			public void append (PhotoStream.Utils.NewsActivity post);
			public void clear ();
			public bool contains (PhotoStream.Utils.NewsActivity activity);
			public new void prepend (PhotoStream.Utils.NewsActivity post);
		}
		[CCode (cheader_filename = "photostream.h")]
		public class PhotoStack : Gtk.Stack {
			public PhotoStack ();
		}
		[CCode (cheader_filename = "photostream.h")]
		public class PostBox : Gtk.EventBox {
			public Gtk.Image avatar;
			public Gtk.Alignment avatarAlignment;
			public Gtk.EventBox avatarBox;
			public Gtk.Box box;
			public PhotoStream.Widgets.CommentsList commentList;
			public Gtk.Alignment commentsAlignment;
			public Gtk.Alignment dateAlignment;
			public PhotoStream.Widgets.DateLabel dateLabel;
			public Gdk.Pixbuf dislikePixbuf;
			public Gtk.Image image;
			public Gtk.Alignment imageAlignment;
			public Gtk.Fixed imageBox;
			public Gtk.EventBox imageEventBox;
			public Gtk.Alignment likeAlignment;
			public Gtk.EventBox likeBox;
			public Gtk.Image likeImage;
			public Gdk.Pixbuf likePixbuf;
			public Gtk.Box likeToolbar;
			public Gtk.Label likesLabel;
			public string likesText;
			public Gtk.Alignment locationAlignment;
			public Gtk.Box locationBox;
			public Gtk.EventBox locationEventBox;
			public Gtk.Image locationImage;
			public Gtk.Label locationLabel;
			public Gdk.Pixbuf locationPixbuf;
			public PhotoStream.Utils.MediaInfo post;
			public Gtk.Alignment titleAlignment;
			public Gtk.Label titleLabel;
			public Gtk.Alignment userNameAlignment;
			public Gtk.Label userNameLabel;
			public Gtk.Box userToolbar;
			public GLib.List<Gtk.Popover> usersOnPhoto;
			public bool windowOpened;
			public const int AVATAR_SIZE;
			public const int IMAGE_SIZE;
			public const int LIKE_SIZE;
			public const int LOCATION_SIZE;
			public PostBox (PhotoStream.Utils.MediaInfo post);
			public bool callback ();
			public void loadAvatar ();
			public void loadImage ();
			public void loadLocation (PhotoStream.Utils.Location location);
			public void openMedia ();
			public int switchLike ();
			public signal void imageLoaded (PhotoStream.Utils.MediaInfo post);
		}
		[CCode (cheader_filename = "photostream.h")]
		public class PostList : Gtk.Box {
			public int IMAGE_SIZE;
			public GLib.List<PhotoStream.Widgets.PostBox> boxes;
			public Gtk.Box imagesBox;
			public Gtk.Grid imagesGrid;
			public Gtk.ScrolledWindow imagesWindow;
			public Gtk.Button moreButton;
			public Gtk.Alignment moreButtonAlignment;
			public Gtk.Button moreButtonImages;
			public Gtk.Alignment moreButtonImagesAlignment;
			public string olderFeedLink;
			public Gtk.ListBox postList;
			public Gtk.ScrolledWindow postsWindow;
			public GLib.List<Gdk.Pixbuf> srcImages;
			public Gtk.Stack stack;
			public PostList (bool cannotViewImages = false);
			public void append (PhotoStream.Utils.MediaInfo post);
			public void clear ();
			public bool contains (PhotoStream.Utils.MediaInfo post);
			public void deleteMoreButton ();
			public new void prepend (PhotoStream.Utils.MediaInfo post);
			public void resizeAllImages (int windowSize);
		}
		[CCode (cheader_filename = "photostream.h")]
		public class SearchWindowBox : Gtk.Box {
			public string currentWindow;
			public bool isInitialized;
			public Gtk.Button locationButton;
			public PhotoStream.LocationMapWindow locationMapWindow;
			public Gtk.ScrolledWindow locationWindow;
			public Gtk.RadioButton locationsRadio;
			public Gtk.Box radioBox;
			public Gtk.Entry searchQuery;
			public Gtk.Spinner spinner;
			public Gtk.Stack stack;
			public Gtk.StackSwitcher stackSwitcher;
			public Gtk.Box switcherBox;
			public PhotoStream.Widgets.HashTagList tagList;
			public Gtk.RadioButton tagsRadio;
			public string tagsRequest;
			public Gtk.ScrolledWindow tagsWindow;
			public PhotoStream.Widgets.UserList userList;
			public Gtk.RadioButton usersRadio;
			public string usersRequest;
			public Gtk.ScrolledWindow usersWindow;
			public SearchWindowBox ();
			public void addFields ();
			public void openSearchLocation ();
			public int searchTag (string tag);
			public int searchUser (string username);
			public void typed ();
			public signal void tagsLoaded ();
			public signal void userAvatarLoaded (PhotoStream.Widgets.UserBox box);
			public signal void userRelationshipLoaded (PhotoStream.Widgets.UserBox box);
			public signal void usersLoaded ();
		}
		[CCode (cheader_filename = "photostream.h")]
		public class UserBox : Gtk.EventBox {
			public Gtk.EventBox avatarBox;
			public Gtk.Image avatarImage;
			public Gtk.Box box;
			public PhotoStream.Widgets.CommentsList commentList;
			public Gdk.Pixbuf followPixbuf;
			public Gdk.Pixbuf followingPixbuf;
			public Gdk.Pixbuf notFollowingPixbuf;
			public Gtk.Alignment relationshipAlignment;
			public Gtk.EventBox relationshipBox;
			public Gtk.Image relationshipImage;
			public Gdk.Pixbuf requestedPixbuf;
			public Gtk.Label titleLabel;
			public Gdk.Pixbuf unfollowPixbuf;
			public PhotoStream.Utils.User user;
			public Gtk.Label userNameLabel;
			public Gtk.Box userToolbar;
			public const int AVATAR_SIZE;
			public const int RELATIONSHIP_HEIGHT;
			public const int RELATIONSHIP_WIDTH;
			public UserBox (PhotoStream.Utils.User user);
			public void loadAvatar ();
			public void loadRelationship ();
		}
		[CCode (cheader_filename = "photostream.h")]
		public class UserList : Gtk.ListBox {
			public GLib.List<PhotoStream.Widgets.UserBox> boxes;
			public Gtk.Button moreButton;
			public string olderUsersLink;
			public UserList ();
			public void addMoreButton ();
			public void append (PhotoStream.Utils.User user);
			public void clear ();
			public bool contains (PhotoStream.Utils.User user);
			public void deleteMoreButton ();
			public new void prepend (PhotoStream.Utils.User user);
		}
		[CCode (cheader_filename = "photostream.h")]
		public class UserWindowBox : Gtk.Box {
			public Gtk.Image avatar;
			public Gtk.Alignment avatarAlignment;
			public Gtk.Box avatarBox;
			public Gdk.Pixbuf avatarPixbuf;
			public Gtk.Box box;
			public Gtk.Box errorBox;
			public Gtk.ScrolledWindow feedWindow;
			public Gdk.Pixbuf followPixbuf;
			public Gtk.Label followersCount;
			public Gtk.Box followersCountBox;
			public Gtk.Alignment followersCountBoxAlignment;
			public Gtk.EventBox followersCountEventBox;
			public Gtk.Label followersCountText;
			public Gdk.Pixbuf followingPixbuf;
			public Gtk.Label followsCount;
			public Gtk.Box followsCountBox;
			public Gtk.Alignment followsCountBoxAlignment;
			public Gtk.EventBox followsCountEventBox;
			public Gtk.Label followsCountText;
			public bool isPrivate;
			public Gtk.Label mediaCount;
			public Gtk.Box mediaCountBox;
			public Gtk.Alignment mediaCountBoxAlignment;
			public Gtk.Label mediaCountText;
			public Gdk.Pixbuf notFollowingPixbuf;
			public Gtk.Label privateLabel;
			public Gtk.Alignment relationshipAlignment;
			public Gtk.EventBox relationshipBox;
			public Gtk.Image relationshipImage;
			public Gdk.Pixbuf requestedPixbuf;
			public Gdk.Pixbuf unfollowPixbuf;
			public PhotoStream.Utils.User user;
			public Gtk.Box userCountsBox;
			public PhotoStream.Widgets.PostList userFeed;
			public Gtk.Box userInfoBox;
			public Gtk.EventBox userInfoEventBox;
			public Gtk.Label userName;
			public Gtk.Viewport viewport;
			public const int RELATIONSHIP_HEIGHT;
			public const int RELATIONSHIP_WIDTH;
			public UserWindowBox ();
			public void clearPrivate ();
			public void load (PhotoStream.Utils.User user);
			public void loadFeed (GLib.List<PhotoStream.Utils.MediaInfo> feedList);
			public int loadImages ();
			public void loadOlderFeed (GLib.List<PhotoStream.Utils.MediaInfo> feedList);
			public void loadPrivate ();
			public void loadRelationship ();
		}
	}
	[CCode (cheader_filename = "photostream.h")]
	public class App : Granite.Application {
		public static string CACHE_AVATARS;
		public static string CACHE_HTML;
		public static string CACHE_URL;
		public int REFRESH_INTERVAL;
		public Gtk.MenuItem aboutMenuItem;
		public static string appToken;
		public Gtk.ToolButton backButton;
		public Gtk.InfoBar bar;
		public Gtk.Box box;
		public PhotoStream.Widgets.CommentsList commentsList;
		public Gtk.ToggleToolButton feedButton;
		public PhotoStream.Widgets.PostList feedList;
		public static GLib.List<PhotoStream.Utils.MediaInfo> feedPosts;
		public Gtk.HeaderBar header;
		public GLib.List<PhotoStream.Utils.HistoryEntry> history;
		public bool isFeedLoaded;
		public static bool isMainWindowShown;
		public Gee.HashMap<string,bool> isPageLoaded;
		public Gtk.Spinner loadingSpinner;
		public PhotoStream.Widgets.LocationFeedBox locationFeedBox;
		public PhotoStream.LoginWindow loginWindow;
		public PhotoStream.MainWindow mainWindow;
		public Gtk.Menu menu;
		public Gtk.ToggleToolButton newsButton;
		public PhotoStream.Widgets.NewsList newsList;
		public Gtk.ToggleToolButton photoButton;
		public PhotoStream.Widgets.PostList postList;
		public Gtk.MenuItem quitMenuItem;
		public Gtk.ToggleToolButton searchButton;
		public PhotoStream.Widgets.SearchWindowBox searchWindowBox;
		public static PhotoStream.Utils.User selfUser;
		public Gtk.MenuButton settingsButton;
		public Gtk.MenuItem settingsMenuItem;
		public PhotoStream.SettingsWindow settingsWindow;
		public PhotoStream.Widgets.PhotoStack stack;
		public PhotoStream.Widgets.HashTagFeedBox tagFeedBox;
		public Gtk.ToggleToolButton userButton;
		public PhotoStream.Widgets.UserList userList;
		public PhotoStream.Widgets.UserWindowBox userWindowBox;
		public const string CACHE_IMAGES;
		public const string CLIENT_ID;
		public const string CLIENT_SECRET;
		public const string REDIRECT_URI;
		public const string SCHEMA_INSTAGRAM_IP;
		public const string SCHEMA_LAST_CHECKED;
		public const string SCHEMA_POSTS_OR_IMAGES;
		public const string SCHEMA_REFRESH_INTERVAL;
		public const string SCHEMA_TOKEN;
		public const string SCHEMA_URI;
		public App ();
		protected override void activate ();
		public void addHistoryEntry (string type, string id);
		public void connectNewsBoxHandlers (PhotoStream.Widgets.NewsBox newsBox);
		public string getActiveWindow ();
		public bool handleUris (string uri);
		public int loadComments (string postId);
		public int loadFeed ();
		public int loadImages ();
		public int loadLocation (string locationId);
		public void loadNews ();
		public int loadOlderFeed ();
		public void loadOlderLocationFeed ();
		public void loadOlderTagFeed ();
		public int loadOlderUserFeed ();
		public int loadPost (string id);
		public void loadSelfInfo ();
		public int loadTag (string tagName);
		public int loadUser (string id, PhotoStream.Utils.User? loadedUser = null);
		public int loadUserFromUsername (string username);
		public int loadUsers (string postId, string type);
		public int openLocationMap (PhotoStream.Utils.Location location);
		public void preloadWindows ();
		public void refreshFeed ();
		public void refreshNews ();
		public void response (int response_id);
		public void setErrorWidgets (string reason);
		public int setFeedWidgets ();
		public void setHeader ();
		public void setHeaderCallbacks ();
		public void setLoginWindow ();
		public void setSettingsWindow ();
		public void stepBackHistory ();
		public void stubLoading ();
		public void switchWindow (string window);
		public void tryLogin ();
		public void uncheckButtonsExcept (string notUncheck);
	}
	[CCode (cheader_filename = "photostream.h")]
	public class BulkDownloadWindow : Gtk.Window {
		public Gtk.RadioButton allPosts;
		public Gtk.Box box;
		public Gtk.Button downloadPostsButton;
		public Gtk.Alignment gridAlignment;
		public string id;
		public Gtk.RadioButton onlyImages;
		public Gtk.RadioButton onlyVideos;
		public Gtk.Label patternExplanation;
		public Gtk.Label postsTypeLabel;
		public Gtk.ProgressBar progressBar;
		public Gtk.Alignment progressBarAlignment;
		public Gtk.Box radioBox;
		public Gtk.Button saveFolderButton;
		public Gtk.Entry saveFolderEntry;
		public Gtk.Label saveFolderLabel;
		public Gtk.Entry savePatternEntry;
		public Gtk.Grid settingsGrid;
		public Gtk.Alignment statusAlignment;
		public Gtk.Label statusLabel;
		public Gtk.CheckButton useSavePattern;
		public BulkDownloadWindow (string id);
	}
	[CCode (cheader_filename = "photostream.h")]
	public class LocationMapWindow : Gtk.Window {
		public Gtk.Label distanceLabel;
		public PhotoStream.Utils.Location location;
		public GLib.List<PhotoStream.Utils.Location> locationList;
		public string prevTitle;
		public Gtk.Scale scale;
		public Gtk.Box scaleBox;
		public Gtk.Button searchButton;
		public const double LATITUDE_INITIAL;
		public const double LONGITUDE_INITIAL;
		public const string MAPS_API_KEY;
		public const int RANGE_INITIAL;
		public const int ZOOM_INITIAL;
		public LocationMapWindow ();
		public override bool delete_event (Gdk.EventAny event);
		public void initFields ();
		public void loadLocationsList (double latitude, double longitude);
		public void loadNearbyLocations ();
		public void parseTitle ();
		public LocationMapWindow.with_location (PhotoStream.Utils.Location location);
		public signal void locationLoaded (PhotoStream.Utils.Location location);
		public signal void locationOpened ();
	}
	[CCode (cheader_filename = "photostream.h")]
	public class LoginWindow : Gtk.ApplicationWindow {
		public Gtk.Box box;
		public Gtk.ScrolledWindow scrolledWindow;
		public Gtk.Spinner spinner;
		public LoginWindow ();
		public void confirmToken (string uri);
		public string getCode (string uri);
		public string getHost (string uri);
	}
	[CCode (cheader_filename = "photostream.h")]
	public class MainWindow : Gtk.ApplicationWindow {
		public MainWindow ();
		public override bool delete_event (Gdk.EventAny event);
	}
	[CCode (cheader_filename = "photostream.h")]
	public class SettingsWindow : Gtk.ApplicationWindow {
		public Gtk.TextView about;
		public Gtk.Alignment aboutAlignment;
		public Gtk.Label aboutLabel;
		public Gtk.Alignment aboutLabelAlignment;
		public Gtk.Box appSettingsBox;
		public Granite.Widgets.SourceList.Item appSettingsItem;
		public Gtk.Label cacheSpaceLabel;
		public Gtk.Alignment cacheSpaceLabelAlignment;
		public Granite.Widgets.SourceList.Item changePasswordItem;
		public Gtk.Button clearCacheButton;
		public Gtk.Alignment clearCacheButtonAlignment;
		public Gtk.Box editProfileBox;
		public Granite.Widgets.SourceList.Item editProfileItem;
		public Gtk.Entry email;
		public Gtk.Alignment emailAlignment;
		public Gtk.Label emailLabel;
		public Gtk.Alignment emailLabelAlignment;
		public Gtk.Entry fullName;
		public Gtk.Alignment fullNameAlignment;
		public Gtk.Label fullNameLabel;
		public Gtk.Alignment fullNameLabelAlignment;
		public Gtk.RadioButton imagesRadioButton;
		public Granite.Widgets.SourceList.Item logOutItem;
		public Granite.Widgets.SourceList.Item manageAppsItem;
		public Granite.Widgets.ThinPaned pane;
		public Gtk.Entry phoneNumber;
		public Gtk.Alignment phoneNumberAlignment;
		public Gtk.Label phoneNumberLabel;
		public Gtk.Alignment phoneNumberLabelAlignment;
		public Gtk.Box postsDisplayTypeBox;
		public Gtk.Alignment postsDisplayTypeBoxAlignment;
		public Gtk.Box postsOrImagesBox;
		public Gtk.Label postsOrImagesLabel;
		public Gtk.RadioButton postsRadioButton;
		public Gtk.CheckButton recommend;
		public Gtk.Alignment recommendAlignment;
		public Gtk.Label recommendLabel;
		public Gtk.Alignment recommendLabelAlignment;
		public Gtk.Grid settingsGrid;
		public Gtk.Stack settingsStack;
		public Gtk.ComboBox sex;
		public Gtk.Alignment sexAlignment;
		public Gtk.Label sexLabel;
		public Gtk.Alignment sexLabelAlignment;
		public Granite.Widgets.SourceList sourceList;
		public Gtk.Spinner spinner;
		public Gtk.Button sumbitSettingsButton;
		public Gtk.Entry username;
		public Gtk.Alignment usernameAlignment;
		public Gtk.Label usernameLabel;
		public Gtk.Alignment usernameLabelAlignment;
		public Gtk.Entry website;
		public Gtk.Alignment websiteAlignment;
		public Gtk.Label websiteLabel;
		public Gtk.Alignment websiteLabelAlignment;
		public SettingsWindow ();
		public void clearCache ();
		public void initAlignments ();
		public void loadAppSettings ();
		public void loadSettings ();
		public void logOut ();
		public void logOutConfirm ();
		public void submitSettingsConfirm ();
		public void submitSettingsReally (PhotoStream.Utils.User user, PhotoStream.Utils.Settings settings);
	}
}
[CCode (cheader_filename = "photostream.h")]
public static string getResponse (string host);
[CCode (cheader_filename = "photostream.h")]
public static string getUserInfo (string id);
[CCode (cheader_filename = "photostream.h")]
public static string getUserFeed (string minId = "");
[CCode (cheader_filename = "photostream.h")]
public static string getUserMedia (string id);
[CCode (cheader_filename = "photostream.h")]
public static string getLikedPosts ();
[CCode (cheader_filename = "photostream.h")]
public static string getOlderUserFeed (string olderFeedLink);
[CCode (cheader_filename = "photostream.h")]
public static string searchUsers (string user);
[CCode (cheader_filename = "photostream.h")]
public static string getUserFollows (string user);
[CCode (cheader_filename = "photostream.h")]
public static string getUserFollowers (string user);
[CCode (cheader_filename = "photostream.h")]
public static string getRequestedUsers ();
[CCode (cheader_filename = "photostream.h")]
public static string getUsersRelationship (string user);
[CCode (cheader_filename = "photostream.h")]
public static string relationshipAction (string user, string action);
[CCode (cheader_filename = "photostream.h")]
public static string getMediaData (string id);
[CCode (cheader_filename = "photostream.h")]
public static string mediaSearch (double latitude, double longitude, int distance = 1000);
[CCode (cheader_filename = "photostream.h")]
public static string getPopular ();
[CCode (cheader_filename = "photostream.h")]
public static string getComments (string id);
[CCode (cheader_filename = "photostream.h")]
public static string postComment (string id, string comment);
[CCode (cheader_filename = "photostream.h")]
public static string deleteComment (string mediaId, string commentId);
[CCode (cheader_filename = "photostream.h")]
public static string getMediaLikes (string id);
[CCode (cheader_filename = "photostream.h")]
public static string likeMedia (string id);
[CCode (cheader_filename = "photostream.h")]
public static string dislikeMedia (string id);
[CCode (cheader_filename = "photostream.h")]
public static string getTagInfo (string tag);
[CCode (cheader_filename = "photostream.h")]
public static string getTagRecent (string tag);
[CCode (cheader_filename = "photostream.h")]
public static string searchTags (string tag);
[CCode (cheader_filename = "photostream.h")]
public static string getLocationInfo (string id);
[CCode (cheader_filename = "photostream.h")]
public static string getLocationRecent (string id);
[CCode (cheader_filename = "photostream.h")]
public static string searchLocation (double latitude, double longitude, int distance = 1000);
[CCode (cheader_filename = "photostream.h")]
public static void downloadFile (string url, string filename) throws GLib.Error;
[CCode (cheader_filename = "photostream.h")]
public static string getUserNews ();
[CCode (cheader_filename = "photostream.h")]
public static string getUserSettings ();
[CCode (cheader_filename = "photostream.h")]
public static string resolveHost ();
[CCode (cheader_filename = "photostream.h")]
public static string postPicture (string fileUrl);
[CCode (cheader_filename = "photostream.h")]
public static string postSettings (PhotoStream.Utils.Settings settings, PhotoStream.Utils.User user);
[CCode (cheader_filename = "photostream.h")]
public static GLib.List<PhotoStream.Utils.MediaInfo> parseFeed (string message) throws GLib.Error;
[CCode (cheader_filename = "photostream.h")]
public static PhotoStream.Utils.MediaInfo parseMediaPostFromObject (Json.Node mediaPost) throws GLib.Error;
[CCode (cheader_filename = "photostream.h")]
public static PhotoStream.Utils.Location parseLocationFromObject (Json.Object locationObject) throws GLib.Error;
[CCode (cheader_filename = "photostream.h")]
public static GLib.List<PhotoStream.Utils.Comment> parseCommentsFromObject (Json.Object commentObject) throws GLib.Error;
[CCode (cheader_filename = "photostream.h")]
public static PhotoStream.Utils.Comment parseCommentFromObject (Json.Object comment) throws GLib.Error;
[CCode (cheader_filename = "photostream.h")]
public static GLib.List<PhotoStream.Utils.Comment> parseComments (string message) throws GLib.Error;
[CCode (cheader_filename = "photostream.h")]
public static PhotoStream.Utils.Comment parseCommentFromReply (string message) throws GLib.Error;
[CCode (cheader_filename = "photostream.h")]
public static PhotoStream.Utils.User parseUserFromObject (Json.Object userObject) throws GLib.Error;
[CCode (cheader_filename = "photostream.h")]
public static PhotoStream.Utils.User parseUser (string message) throws GLib.Error;
[CCode (cheader_filename = "photostream.h")]
public static string parseToken (string responce) throws GLib.Error;
[CCode (cheader_filename = "photostream.h")]
public static PhotoStream.Utils.MediaInfo parseMediaPost (string message) throws GLib.Error;
[CCode (cheader_filename = "photostream.h")]
public static void checkErrors (Json.Object root_object) throws GLib.Error;
[CCode (cheader_filename = "photostream.h")]
public static void tryLoadMessage (Json.Parser parser, string message) throws GLib.Error;
[CCode (cheader_filename = "photostream.h")]
public static string parsePagination (string message) throws GLib.Error;
[CCode (cheader_filename = "photostream.h")]
public static GLib.List<PhotoStream.Utils.User> parseUserList (string message) throws GLib.Error;
[CCode (cheader_filename = "photostream.h")]
public static GLib.List<PhotoStream.Utils.Tag> parseTagList (string message) throws GLib.Error;
[CCode (cheader_filename = "photostream.h")]
public static PhotoStream.Utils.Tag parseTag (string message) throws GLib.Error;
[CCode (cheader_filename = "photostream.h")]
public static PhotoStream.Utils.Tag parseTagFromObject (Json.Object tagObject) throws GLib.Error;
[CCode (cheader_filename = "photostream.h")]
public static PhotoStream.Utils.Location parseLocation (string message) throws GLib.Error;
[CCode (cheader_filename = "photostream.h")]
public static GLib.List<PhotoStream.Utils.Location> parseLocationList (string message) throws GLib.Error;
[CCode (cheader_filename = "photostream.h")]
public static PhotoStream.Utils.Relationship parseRelationship (string message) throws GLib.Error;
[CCode (cheader_filename = "photostream.h")]
public static void parseErrors (string message) throws GLib.Error;
[CCode (cheader_filename = "photostream.h")]
public static GLib.List<PhotoStream.Utils.NewsActivity> parseNews (string message);
[CCode (cheader_filename = "photostream.h")]
public static PhotoStream.Utils.NewsActivity parseActivity (Xml.Node* liElement);
[CCode (cheader_filename = "photostream.h")]
public static Xml.Node* getChildWithId (Xml.Node* node, string id);
[CCode (cheader_filename = "photostream.h")]
public static Xml.Node* getChildWithName (Xml.Node* node, string name);
[CCode (cheader_filename = "photostream.h")]
public static Xml.Node* getChildWithClass (Xml.Node* node, string classNeeded);
[CCode (cheader_filename = "photostream.h")]
public static Xml.Node* getChildWithNameAttr (Xml.Node* node, string name);
[CCode (cheader_filename = "photostream.h")]
public static PhotoStream.Utils.Settings parseSettings (string message);
[CCode (cheader_filename = "photostream.h")]
public static void printFeed (GLib.List<PhotoStream.Utils.MediaInfo> list);
[CCode (cheader_filename = "photostream.h")]
public static void printPost (PhotoStream.Utils.MediaInfo post);
[CCode (cheader_filename = "photostream.h")]
public static void printLocation (PhotoStream.Utils.Location location);
[CCode (cheader_filename = "photostream.h")]
public static void printComment (PhotoStream.Utils.Comment comment);
[CCode (cheader_filename = "photostream.h")]
public static void printActivityList (GLib.List<PhotoStream.Utils.NewsActivity> activityList);
[CCode (cheader_filename = "photostream.h")]
public static void printActivity (PhotoStream.Utils.NewsActivity activity);
[CCode (cheader_filename = "photostream.h")]
public static void printHistory (GLib.List<PhotoStream.Utils.HistoryEntry> history);
[CCode (cheader_filename = "photostream.h")]
public static void printHistoryEntry (PhotoStream.Utils.HistoryEntry entry);
[CCode (cheader_filename = "photostream.h")]
public static string loadToken ();
[CCode (cheader_filename = "photostream.h")]
public static void setToken (string token);
[CCode (cheader_filename = "photostream.h")]
public static string loadAddress ();
[CCode (cheader_filename = "photostream.h")]
public static void setAddress (string ip);
[CCode (cheader_filename = "photostream.h")]
public static int64 loadDate ();
[CCode (cheader_filename = "photostream.h")]
public static int loadRefreshInterval ();
[CCode (cheader_filename = "photostream.h")]
public static void setCurrentDate ();
[CCode (cheader_filename = "photostream.h")]
public static bool loadPostsOrImages ();
[CCode (cheader_filename = "photostream.h")]
public static void setPostsOrImages (bool value);
[CCode (cheader_filename = "photostream.h")]
public static void createSchema ();
[CCode (cheader_filename = "photostream.h")]
public static string wrapInTags (string original);
[CCode (cheader_filename = "photostream.h")]
public static string getFileName (string url);
[CCode (cheader_filename = "photostream.h")]
public static string replaceHostWithIp (string host, string ip);
[CCode (cheader_filename = "photostream.h")]
public static void displayNewsNotifications (GLib.List<PhotoStream.Utils.NewsActivity> activityList);
